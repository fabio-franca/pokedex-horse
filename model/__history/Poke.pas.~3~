unit Poke;

interface

uses FireDAC.Comp.Client, Data.DB, System.SysUtils, Connection;

type
  TPoke = class
  private
    FID          : Integer;
    FName        : String;
    FLv          : Integer;
    FType        : String;
    FRarity      : String;
    FDateInsert  : TDateTime;
  public
    constructor Create;
    destructor Destroy; override;
    property ID          : Integer read  FID write FID;
    property Name        : String read  FName write FName;
    property Lv          : Integer read  FLv write FLv;
    property FType       : String read  FType write FType;
    property Rarity      : String read  FRarity write FRarity;
    property DateInsert  : TDateTime read  FDateInsert write FDateInsert;

    function insert (out erro: String): Boolean;

  end;

implementation

{ Poke }

constructor TPoke.Create;
begin
  Connection.Connect;
end;

destructor TPoke.Destroy;
begin
  Connection.Disconect;
end;

function TPoke.Insert(out erro: String): Boolean;
var
  Query    : TFDQuery;
  NextPoke : Integer;
begin
  try
    CriarQuery(Query);

    Query.Close;
    Query.SQL.Clear;
    Query.SQL.Add('INSERT INTO bairros(codibair, descbair)');
    Query.SQL.Add('VALUES(:codibair, :descbair)           ');

    Query.ParamByName('codibair').Value := proximoBairro;
    Query.ParamByName('descbair').Value := Descbair;

    Query.ExecSQL;
    Query.Free;

    Codibair := UltimoId();

    if (Codibair = '') or (Codibair.IsEmpty) then
    begin
      Erro := 'Falha ao obter código do bairro';
      Result := False;
      Exit;
    end;

    Erro := '';
    Result := True;

  except on E: Exception do
    begin
      Erro := 'Falha ao salvar registro: ' + e.Message;
      Result := False;
    end;
  end;

end;

end.
